;; Analyzed by ClojureScript 0.0-3308
{:use-macros {read-presentation presentation-tool.macro}, :excludes #{}, :name presentation-tool.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :uses {atom reagent.core}, :defs {highlight-code {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this]))}, :name presentation-tool.core/highlight-code, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, slides {:name presentation-tool.core/slides, :file "src/presentation_tool/core.cljs", :line 13, :column 1, :end-line 13, :end-column 16, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 13, :column 10, :end-line 13, :end-column 16}}, current-slide {:name presentation-tool.core/current-slide, :file "src/presentation_tool/core.cljs", :line 14, :column 1, :end-line 14, :end-column 23, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 14, :column 10, :end-line 14, :end-column 23}}, slide-component {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 18, :column 7, :end-line 18, :end-column 22, :arglists (quote ([i html]))}, :name presentation-tool.core/slide-component, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 22, :method-params ([i html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i html]))}, root-component {:name presentation-tool.core/root-component, :file "src/presentation_tool/core.cljs", :line 24, :column 1, :end-line 24, :end-column 20, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 24, :column 6, :end-line 24, :end-column 20}}, main {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([]))}, :name presentation-tool.core/main, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, next-slide! {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([]))}, :name presentation-tool.core/next-slide!, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, prev-slide! {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([]))}, :name presentation-tool.core/prev-slide!, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bind-keydown {:protocol-inline nil, :meta {:file "/home/gnzh/mydev/presentation-tool/src/presentation_tool/core.cljs", :line 51, :column 7, :end-line 51, :end-column 19, :arglists (quote ([]))}, :name presentation-tool.core/bind-keydown, :variadic false, :file "src/presentation_tool/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {presentation-tool.macro presentation-tool.macro}, :cljs.analyzer/constants {:seen #{:key :top :component-did-mount :component-did-update :absolute :style :div :class :position :__html :p :dangerouslySetInnerHTML :left}, :order [:div :class :dangerouslySetInnerHTML :__html :key :p :style :position :left :top :absolute :component-did-update :component-did-mount]}, :doc nil}